// Generated by CoffeeScript 1.6.3
(function() {
  var Clog, MAXCLOG, isString,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  MAXCLOG = 2000;

  isString = function(value) {
    return typeof value === "string" || false;
  };

  Clog = (function() {
    var setLevel, timerName;

    function Clog() {
      this.now = __bind(this.now, this);
      this._logIndex = 0;
      this._MAX_LOG = 2000;
      this._console = console;
      this._level = ((typeof window !== "undefined" && window !== null) && window.debug ? window.debug : 0);
      if (!((typeof window !== "undefined" && window !== null) && window.chrome && window.console.image)) {
        this._console.image = null;
      }
      this._isChrome = (typeof window !== "undefined" && window !== null) && window.chrome;
    }

    setLevel = function(level) {
      return this._level = level;
    };

    Clog.prototype._arrow = function() {
      return "" + (this._logIndex++) + " --->\t";
    };

    Clog.prototype._bail = function() {
      var enough, gameOverGifs;
      if (!this.__bailed && this._logIndex >= this._MAX_LOG) {
        this.__bailed = true;
        enough = "" + this._MAX_LOG + " is Clogged enough";
        if (this._console.image) {
          gameOverGifs = ['https://i.chzbgr.com/maxW500/7780675840/h4A8F373B/', 'https://i.chzbgr.com/maxW500/6162212352/h20E396D/', 'https://i.chzbgr.com/maxW500/5947685376/h2026921A/', 'https://i.chzbgr.com/maxW500/5192719104/h254004F0/', 'http://files.alexasto-com.webnode.es/200000002-cfe27d1d67/classic_game_over_screen_by_el_tortuga-d5eeh9l.gif', 'http://images.wikia.com/sawfilms/images/8/8c/Game_Over_1.gif', 'http://2.bp.blogspot.com/-zNngZiOlI3g/URurPtgBfSI/AAAAAAAASY4/Tvzxso3_PKA/s400/Game-Over-Man-Game-Over.jpg'];
          this._console.image(gameOverGifs[Math.floor(Math.random() * gameOverGifs.length)]);
          this._console.log(enough);
        } else {
          this._console.log('<------------------------>\n\n<------- GAME OVER ------>\n\n<------------------------>\n' + enough);
        }
      }
      return this.__bailed;
    };

    Clog.prototype._passThrough = function() {
      var args, name, _ref;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!this._bail()) {
        return (_ref = this._console)[name].apply(_ref, [this._arrow()].concat(__slice.call(args)));
      }
    };

    Clog.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._passThrough.apply(this, ['log'].concat(__slice.call(args)));
    };

    Clog.prototype.info = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this._level > 0) {
        return this._passThrough.apply(this, ['info'].concat(__slice.call(args)));
      }
    };

    Clog.prototype.warn = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._passThrough.apply(this, ['warn'].concat(__slice.call(args)));
    };

    Clog.prototype.count = function(name) {
      var _base;
      if (!name) {
        return this.warn('Clog.counter needs a name');
      }
      if (this._counter == null) {
        this._counter = {};
      }
      if ((_base = this._counter)[name] == null) {
        _base[name] = 0;
      }
      if (this._isChrome) {
        return this._console.log("" + (this._arrow()) + " " + name + " -> %c" + (++this._counter[name]), "font-weight:bold;font-size:14px;", 'times');
      } else {
        return this._console.log("" + (this._arrow()) + " " + name + " -> " + (++this._counter[name]) + " times");
      }
    };

    Clog.prototype.test = function() {
      var d, i, meta, res, _i, _ref;
      if (!this._bail()) {
        if (arguments.length === 0) {
          return this.meme("You wish to test nothing...", "Solipsist!", "Philosoraptor");
        }
        meta = arguments.callee.caller.toString().match(/Clog.test\(.+\)/igm);
        meta = meta[0].substr("Clog.test(".length);
        meta = meta.substr(0, meta.length - 1);
        meta = meta.split(',');
        meta = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = meta.length; _i < _len; _i++) {
            d = meta[_i];
            _results.push(d.trim().replace('this.', '@'));
          }
          return _results;
        })();
        res = {};
        for (i = _i = 0, _ref = meta.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          res[meta[i]] = arguments[i];
        }
        return this.log(res);
      }
    };

    timerName = null;

    Clog.prototype.now = function(msg) {
      if (!this._bail()) {
        if (msg == null) {
          msg = 'tardis';
        }
        timerName = msg;
        this._console.group("" + (this._arrow()) + " " + timerName);
        this._console.log("" + timerName + " begins");
        return this._console.time(timerName);
      }
    };

    Clog.prototype.since = function() {
      if (!this._bail()) {
        this._console.timeEnd(timerName);
        return this._console.groupEnd();
      }
    };

    Clog.prototype.meme = function(memeOne, memeTwo, memeType, logMessage) {
      if (this._console.image) {
        this._console.meme(memeOne, memeTwo, memeType);
      }
      if (((typeof window !== "undefined" && window !== null) && window.CONFIG && window.CONFIG.BUILD_MODE === false) || (typeof window === "undefined" || window === null)) {
        throw new Error(logMessage);
      }
      if ((typeof window !== "undefined" && window !== null) && !this._console.image) {
        return this._console.log("ERROR meme : " + logMessage);
      }
    };

    Clog.prototype.silence = function() {
      return this._console = {
        log: function() {},
        warn: function() {},
        info: function() {},
        group: function() {},
        groupEnd: function() {},
        trace: function() {},
        time: function() {},
        image: false
      };
    };

    Clog.prototype.noImage = function() {
      return this._console.image = false;
    };

    Clog.prototype.huge = function(str) {
      if (this._isChrome) {
        return this._console.log("%c" + str, 'font-size:60px;color:#fff;text-shadow:0 1px 0 #ccc ,0 2px 0 #c9c9c9 ,0 3px 0 #bbb ,\n0 4px 0 #b9b9b9 ,0 5px 0 #aaa ,0 6px 1px rgba(0,0,0,.1),\n0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),\n0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),\n0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);');
      } else {
        return this._console.log("HUGE : " + str);
      }
    };

    Clog.prototype._drill = function() {
      if (this._console.image) {
        return this._console.image("http://www.pixeljoint.com/files/icons/full/steam_mech_drillpunch.gif");
      } else {
        return this._console.log("DRILLDOWN");
      }
    };

    Clog.prototype._color = function() {
      var END_COLOR, ar, args, bashColor, color, str, _i, _len, _ref;
      color = arguments[0], str = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (!this._bail()) {
        if (this._isChrome) {
          return (_ref = this._console).log.apply(_ref, ["%c" + str, "color:" + color + ";font-weight:bold;"].concat(__slice.call(args)));
        } else {
          END_COLOR = '\033[0m';
          bashColor = (function() {
            switch (color) {
              case 'red':
                return '\033[0;31m';
              case 'green':
                return '\033[0;32m';
              case 'blue':
                return '\033[0;34m';
              case 'orange':
                return '\033[1;33m';
              case 'purple':
                return '\033[0;35m';
            }
          })();
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            ar = args[_i];
            str += " | " + (JSON.stringify(ar));
          }
          return this._console.log("" + bashColor + " " + str + " " + END_COLOR);
        }
      }
    };

    Clog.prototype._prepForColor = function(str) {
      if (!isString(str)) {
        str = JSON.stringify(str);
      }
      return "" + (this._arrow()) + " " + str;
    };

    Clog.prototype.red = function() {
      var args, str;
      str = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this._color.apply(this, ['red', this._prepForColor(str)].concat(__slice.call(args)));
    };

    Clog.prototype.green = function() {
      var args, str;
      str = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this._color.apply(this, ['green', this._prepForColor(str)].concat(__slice.call(args)));
    };

    Clog.prototype.blue = function() {
      var args, str;
      str = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this._color.apply(this, ['blue', this._prepForColor(str)].concat(__slice.call(args)));
    };

    Clog.prototype.orange = function() {
      var args, str;
      str = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this._color.apply(this, ['orange', this._prepForColor(str)].concat(__slice.call(args)));
    };

    Clog.prototype.purple = function() {
      var args, str;
      str = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this._color.apply(this, ['purple', this._prepForColor(str)].concat(__slice.call(args)));
    };

    Clog.prototype.blu = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.blue.apply(this, args);
    };

    Clog.prototype.ora = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.orange.apply(this, args);
    };

    Clog.prototype.gre = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.green.apply(this, args);
    };

    Clog.prototype.pur = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.purple.apply(this, args);
    };

    Clog.prototype.keanu = function(isBig) {
      var keanu, thisKeanu;
      keanu = ['Woah', 'I am the one.', 'Party on', 'No way', 'Woah', 'I know kung fu', 'Excellent!', 'Huh?', 'Whoah..', 'All we are is dust in the wind, dude', 'Most Triumphant', 'Strange things are a foot at the Circle K', 'no way', '69 Dudes!', 'Those are historic babes!', 'Bodacious!', 'Fully full on evil robots', 'So-crates', 'Morpheous', "I'm going to learn jiu jitsu?", 'My name is Neo.', 'No.', 'take 1 step out and take my hand', 'freeze', 'id wanna know what bus it was', 'bomb on bus', 'i need to know can you handle this bus', 'the man has no time', 'theres a gap in the freeway', 'thats all we can do', 'floor it', 'thats against the rules', 'im gonna rip your fucking spine out i swear to god', 'pop quiz asshole', 'your crazy your fuckin crazy', 'he lost his head'];
      thisKeanu = 'KEANU -> ' + keanu[Math.floor(Math.random() * keanu.length)];
      if (!this._bail()) {
        if (this._console.image && !isString(isBig)) {
          if (isBig) {
            this._console.image('http://replygif.net/i/537.gif');
          } else {
            this._console.image('http://www.quotespapa.com/images/mini-keanu-reeves.jpg');
          }
        } else if (isString(isBig)) {
          this._color(isBig, thisKeanu);
        } else {
          this._console.log(thisKeanu);
        }
      }
      return thisKeanu;
    };

    Clog.prototype.arnold = function(color) {
      var arnold, arnoldIMG, thisArnold;
      arnold = ["It's simple, if it jiggles, it's fat.", 'Milk is for babies. When you grow up you have to drink beer.', 'The best activities for your health are pumping and humping.', "You're Fiuhed!", "Cookies, who told you you could MY COOKIES!!!!??", "Who is your Daddy, and what does he do?", "I'm detective John Kimble", "Get in the chopper, now!!", "Guwhah ruuugh guawh!", "Grrrgh uu ahhh!", "Naaa gruh aagghh!!!", "Grrruu guaw ghh raaaaaagh!", "IT'S NOT A TUMOR!", "SHAAAD AAAAAAAAAAAAAAAP!", 'I let him go..', 'He had to split', "Remember Sully when I said I'd kill you last? I lied.", "You are not sending me to the coolah...", "Stop CHEEERING ME UP!", "You are one ugly motherfucker...", "Do it.", "I'll be back.", "Foget it, I'm nut goiing to sit on yo lap"];
      arnoldIMG = ['http://s3-ec.buzzfed.com/static/enhanced/terminal05/2012/9/18/18/anigif_enhanced-buzz-12040-1348006909-1.gif', 'http://s3-ec.buzzfed.com/static/enhanced/web05/2012/9/18/14/anigif_enhanced-buzz-1597-1347992379-13.gif', 'http://s3-ec.buzzfed.com/static/enhanced/web05/2012/9/18/15/anigif_enhanced-buzz-11594-1347996346-0.gif', 'http://s3-ec.buzzfed.com/static/enhanced/web05/2012/9/18/18/anigif_enhanced-buzz-30295-1348006023-2.gif', 'http://s3-ec.buzzfed.com/static/enhanced/web04/2012/9/18/17/anigif_enhanced-buzz-6990-1348002721-21.gif', 'http://s3-ec.buzzfed.com/static/enhanced/web05/2012/9/18/17/anigif_enhanced-buzz-26908-1348003972-9.gif', 'http://s3-ec.buzzfed.com/static/enhanced/web05/2012/9/18/17/anigif_enhanced-buzz-26853-1348003850-7.gif', 'http://s3-ec.buzzfed.com/static/enhanced/web04/2012/9/18/18/anigif_enhanced-buzz-13635-1348008096-4.gif', 'http://s3-ec.buzzfed.com/static/enhanced/web03/2012/9/19/10/anigif_enhanced-buzz-10529-1348063943-15.gif', 'http://s3-ec.buzzfed.com/static/enhanced/web03/2012/9/19/10/anigif_enhanced-buzz-10529-1348063918-13.gif'];
      thisArnold = 'ARNOLD -> ' + arnold[Math.floor(Math.random() * arnold.length)];
      if (!this._bail()) {
        if (this._console.image && !color) {
          this._console.image(arnoldIMG[Math.floor(Math.random() * arnoldIMG.length)]);
        } else if (isString(color)) {
          this._color(color, thisArnold);
        } else {
          this._console.log(thisArnold);
        }
      }
      return thisArnold;
    };

    return Clog;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.__ClogClass = Clog;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.Clog = new Clog();
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = new Clog();
  }

}).call(this);
