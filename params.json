{"name":"Clog","tagline":"Clog your console for fun and profit ","body":"Clog\r\n====\r\n\r\nClog your console for fun and profit! \r\n\r\nThis is a simple logging library written to address \r\nthe common tasks first and provide sugar. It is Chrome browser oriented\r\nbut works with node.js as well. \r\n\r\nClog is written in CoffeeScript, but you can use it in JavaScript with \r\nno problems. However, the examples below will be in CoffeeScript.\r\n\r\n---\r\n\r\n## Installation\r\n\r\nClog is available on npm as `clogjs` (as `clog` has already been\r\ntaken by a vastly inferior library).\r\n\r\n```\r\n// package.json\r\n{\r\n  \"devDependencies\" : {\r\n    \"clogjs\" : \"*\"\r\n  }\r\n}\r\n```\r\n\r\nor you can simply include the file in your browser like so:\r\n\r\n```\r\n<script type=\"text/javascript\" src=\"/path/to/console.image.js\"></script>\r\n<script type=\"text/javascript\" src=\"/path/to/Clog.js\"></script>\r\n```\r\n\r\n[Console.image](https://github.com/adriancooney/console.image) is not\r\nrequired, but is STRONGLY recommend to receive fun and profit.\r\n\r\n---\r\n\r\n## Things it do:\r\n\r\n### Basics\r\n\r\n```\r\n  Clog.log 'howdy'\r\n```\r\nwill log out `\"0 ---> howdy\"`. Clog keeps and internal index of logs, so most\r\nlogs will start with `\"#{index} --->\"`. `Clog.log` will also accept multiple arguments\r\njust like `console.log`.\r\n\r\n```\r\n  Clog.info 'neat!'\r\n  Clog.warn 'super neat!'\r\n```\r\n\r\nThe above wraps `console.info` and `console.warn` in the same way that `Clog.log` wraps `console.log`.\r\n\r\n---\r\n\r\n### Colors\r\n\r\nClog provides easy access to colors! Simply call the colors like so \r\n\r\n```\r\n  Clog.red    \"I'm red!\"\r\n  Clog.blue   \"I'm blue!\"\r\n  Clog.green  \"I'm green!\"\r\n  Clog.orange \"I'm orange!\"\r\n  Clog.purple \"I'm purple!\"\r\n```\r\n\r\nand yes this works in Chrome and Nodejs. Prefer more brevity? you can also use each color\r\nas the first three letters. For example you can call `Clog.purple` as `Clog.pur`.\r\n\r\nColor commands will also `JSON.stringify` the first argument for you.\r\n\r\n---\r\n\r\n### Keanu\r\n\r\nIts often necessary to write something simple to the console, in-order to just see if that line of code executes. Many write\r\nsomething like:\r\n\r\n```\r\n  console.log 'woah'\r\n```\r\n\r\nwith Clog, you can do abit better, with Keanu. `Clog.keanu()` does the same job as `console.log 'woah'`, but will instead\r\nlog out a random Keanu Reeves quote! If you have `console.image` installed you will get a small image of Keanu looking good in the matrix. There is also:\r\n\r\n```\r\n  // logs out either a quote or small image from the matrix\r\n  Clog.keanu()\r\n\r\n  // logs a nice big gif of Keanu\r\n  Clog.keanu true \r\n\r\n  // also colored keanus! all supported colors available\r\n  Clog.keanu 'red'\r\n```\r\n\r\n---\r\n\r\n### Arnold\r\n\r\nWith similar motivation to Keanu, sometimes you log something simple that you expect to log, and it doesn't. There is a bug in your code! So you leave that console message around and rejoice when you finally see it grace your terminal. Well here is where Arnold comes in. Instead of leaving yourself a message like `console.log 'success'` go big with `Clog.arnold()`. Arnold if you have `console.image` installed, you will be greeted with a random gif of\r\nArnold Schwarzenegger kicking ass, like you just kicked ass. \r\n\r\n```\r\n  // logs out either a quote or a big gif of ass kickery\r\n  Clog.arnold()\r\n\r\n  // also colored arnolds! all supported colors available\r\n  Clog.arnold 'blue'\r\n```\r\n\r\n\r\n---\r\n\r\n### Now and Since\r\n\r\nFor measuring time of code execution you can use `Clog.now()` and `Clog.since()` like so:\r\n\r\n```\r\nClog.now()\r\n$.getJSON '/slowness.json', (data) ->\r\n  Clog.since()\r\n```\r\n\r\nThis is just candy wrapping `console.time` (the little known native time measurement console\r\nfeature). You can optionally name your measurement `Clog.now('ajax delay')` (useful if you have more than one time measurement going on), otherwise it will default to `'tardis'` as the label.\r\n\r\n---\r\n\r\n### Test\r\n\r\nHave you written console logs to determine the value of variables? Do they look like this:\r\n\r\n```\r\n  var foo = 5, bar = 60;\r\n  console.log 'foo', foo, 'bar', bar\r\n  // or \r\n  console.log 'foo '+foo, 'bar '+bar\r\n```\r\n\r\nIts annoying to write extra code just to know the name of the variable you are logging.\r\nWith Clog you have:\r\n\r\n```\r\n  var foo = 5, bar = 60;\r\n  Clog.test foo, bar\r\n  // roughly equivalent to \r\n  console.log\r\n    foo : 5\r\n    bar : 60\r\n```\r\n\r\n---\r\n\r\n### Count\r\n\r\nFor easy logging out the number of times code has executed, simply call count like so:\r\n\r\n```\r\n  for [0...5]\r\n    Clog.count 'simple loop'\r\n  // will log out\r\n  console.log 'simple loop -> 1 times'\r\n  console.log 'simple loop -> 2 times'\r\n  console.log 'simple loop -> 3 times'\r\n  console.log 'simple loop -> 4 times'\r\n  console.log 'simple loop -> 5 times'\r\n  console.log 'simple loop -> 6 times'\r\n\r\n```\r\n\r\n---\r\n\r\n### Game Over\r\n\r\nIf you Clog out more than 2000 logs Clog will log out a `'GAME OVER'` message like below:\r\n![GAMEOVER](https://i.chzbgr.com/maxW500/7780675840/h4A8F373B/)\r\nand then die to prevent your browser from crashing.\r\n\r\n---\r\n\r\n### Error Memes\r\n\r\nThis one is really only if you have `console.image`. There are some errors you can foresee as a developer. Ones that should stop everything until its fixed. Ones that are the result of you breaking things you know you should not break. When that happens its painful, so why not preemptively inject some levity into the situation? `Clog.meme` fires `console.image`'s `console.meme` functionality along with a native Error. If you are in an environment without `console.image` it just throws a native Error.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}